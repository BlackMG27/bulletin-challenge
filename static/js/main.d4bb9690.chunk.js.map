{"version":3,"sources":["utils/CurrentGrab.js","utils/ForecastGrab.js","components/forecast/forecast.jsx","components/search/search.jsx","App.js","reportWebVitals.js","index.js"],"names":["zipCode","axios","get","ForecastWeek","fore","date","high","low","rain","index","fConverter","temp","toFixed","nDate","Date","className","role","add","days","format","Search","fetchCurrentWeather","zip","CurrentGrab","then","res","setState","today","data","status","submitted","catch","err","console","log","fetchForecast","ForecastGrab","forecast","list","makeRequest","handleChange","e","target","value","name","handleSubmit","preventDefault","state","isLoading","night","this","thisForecast","newForecast","max","min","thisHasRain","hasRain","isSubmitted","parseInt","Intl","DateTimeFormat","weekday","day","month","year","timezone","newForecastWeek","reduce","a","c","dt_txt","substring","push","Object","values","t","length","prev","cur","main","temp_max","temp_min","r","hasOwnProperty","some","onSubmit","htmlFor","type","maxLength","placeholder","onChange","onKeyPress","key","onFocus","test","id","sys","country","feels_like","iconId","weather","alt","description","map","d","i","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAEe,EACQ,SAAAA,GACf,OAAOC,IAAMC,IAAN,8DAAiEF,EAAjE,6CCDG,EACA,SAAAA,GACX,OAAOC,IACJC,IADI,+DAEqDF,EAFrD,6C,wBCsCCG,EAxCM,SAACC,GAAU,IAAD,EACMA,EAAKC,KAA/BC,EADoB,EACpBA,KAAMC,EADc,EACdA,IAAKC,EADS,EACTA,KAAMC,EADG,EACHA,MAClBC,EAAa,SAAAC,GAEf,OADAA,EAAQ,KAAOA,EAAO,KAAQ,IAClBC,QAAQ,IAElBC,EAAQ,IAAIC,KAClB,OACI,cAAC,WAAD,UACI,0BAASC,UAAU,4BAA4BC,KAAK,WAApD,UACM,qBAAKD,UAAU,iCAAiCC,KAAK,cAArD,SACE,oBAAID,UAAU,uCAAd,SACI,cAAC,IAAD,CAAQE,IAAK,CAACC,KAAMT,EAAQ,GAAIU,OAAO,QAAvC,SAAgDN,QAGtD,sBAAKE,UAAU,oCAAoCC,KAAK,cAAxD,UACE,qBAAID,UAAU,yCAAd,mBACWL,EAAWJ,GADtB,WAGA,qBAAIS,UAAU,yCAAd,kBACUL,EAAWH,GADrB,cAIF,sBAAKQ,UAAU,iCAAf,UACA,oBAAIA,UAAU,sCAAd,2BAGeP,EACG,mBAAGO,UAAU,wCAAb,6BAEA,mBAAGA,UAAU,2CAAb,kCCkNrBK,E,kDAzOX,aAAc,IAAD,8BACT,gBAaAC,oBAAsB,SAAAC,GACjBC,EAA8BD,GAC1BE,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVC,MAAOF,EAAIG,KACXC,OAAQJ,EAAII,OACZC,WAAW,OAGlBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAvBzB,EA0BTG,cAAgB,SAAAb,GACZc,EAAyBd,GACxBE,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVW,SAAUZ,EAAIG,KAAKU,KACnBT,OAAQJ,EAAII,OACZC,WAAW,OAEhBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAlCvB,EA0CTO,YAAc,aA1CL,EA+CbC,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAjBC,EADS,EACTA,MAAOC,EADE,EACFA,KACd,EAAKlB,SAAL,eACKkB,EAAOD,KAlDH,EAsDdE,aAAe,SAAAJ,GACVA,EAAEK,iBACF,EAAKpB,SAAL,eACO,EAAKqB,QAEZ,EAAK1B,oBAAoB,EAAK0B,MAAMzB,KACpC,EAAKa,cAAc,EAAKY,MAAMzB,MA1D9B,EAAKyB,MAAQ,CACTzB,IAAK,GACLK,MAAO,GACPU,SAAU,GACVP,WAAW,EACXD,OAAQ,GACRmB,WAAW,EACXC,OAAO,GATF,E,qDAqCT,WACIC,KAAK7B,sBACL6B,KAAKf,kB,oBA8BT,WAAS,IAwBDgB,EAAcC,EAAaC,EAAKC,EAAKC,EAAaC,EAxBlD,OACEC,EAAcP,KAAKH,MAAMjB,UACzBD,EAAS6B,SAASR,KAAKH,MAAMlB,QAI7BnB,EAAa,SAAAC,GAEd,OADAA,EAAQ,KAAOA,EAAO,KAAQ,IAClBC,QAAQ,IAGnBe,EAAQuB,KAAKH,MAAMpB,MASnBtB,EAAO,IAAIsD,KAAKC,eAAe,QAPjB,CAChBC,QAAS,QACTC,IAAK,UACLC,MAAO,QACPC,KAAM,UACNC,SAAU,QAE6C9C,OAAO,IAAIL,MAKhEoD,EAAkB,GAGxBf,EALiBD,KAAKH,MAAMV,SAKJ8B,QAAO,SAACC,EAAGC,GAU/B,OARKD,EAAEC,EAAEC,OAAOC,UAAU,EAAG,KAM3BH,EAAEC,EAAEC,OAAOC,UAAU,EAAG,KAAKC,KAAKH,GAJlCD,EAAEC,EAAEC,OAAOC,UAAU,EAAG,KAAO,CAACF,GAM3BD,IAEN,IAEHhB,EAAcqB,OAAOC,OAAOvB,GAE5B,IAAK,IAAIwB,EAAI,EAAGA,EAAIvB,EAAYwB,OAAQD,IAEtCtB,EAAMD,EAAYuB,GAAGR,QAAO,SAACU,EAAMC,GACjC,OAAOD,EAAKE,KAAKC,SAAWF,EAAIC,KAAKC,SAAWH,EAAOC,KAGzDxB,EAAMF,EAAYuB,GAAGR,QAAO,SAACU,EAAMC,GACjC,OAAOD,EAAKE,KAAKE,SAAWH,EAAIC,KAAKE,SAAWJ,EAAOC,KAIzDvB,EAAc,SAAC2B,GACb,OAAOA,EAAEC,eAAe,SAI1B3B,EAAUJ,EAAYuB,GAAGS,KAAK7B,GAG9BW,EAAgBM,KAAK,CACnBlE,KAAM+C,EAAI0B,KAAKC,SACfzE,IAAK+C,EAAIyB,KAAKE,SACdzE,KAAMgD,EACN/C,MAAOkE,IAIb,OACI,eAAC,WAAD,WACI,yBAAS5D,UAAU,SAAnB,SACI,uBAAMsE,SAAYnC,KAAKL,aAAc9B,UAAU,eAA/C,UACI,uBACIuE,QAAQ,YACRvE,UAAU,qBAFd,mCAIA,uBACIwE,KAAK,OACLC,UAAU,IACVC,YAAY,iBACZ1E,UAAU,qBACV4B,MAASO,KAAKH,MAAMzB,IACpBsB,KAAK,MACL8C,SAAYxC,KAAKV,aACjBmD,WAAc,SAAClD,GACE,UAAVA,EAAEmD,KACD,EAAK/C,aAAaJ,IAG1BoD,QAAY,SAACpD,GAxFtB,YAAYqD,KAyFkBrD,IAOrBsD,GAAG,cAGP,wBACIhF,UAAU,sBACVwE,KAAK,SAFT,sCAMR,yBAASxE,UAAU,eAAnB,SAEoB,MAAXc,EACG,oBAAId,UAAU,wBAAd,8BAGF,OAMD0C,EACG,0BAAS1C,UAAU,UAAnB,UACI,qBAAIA,UAAU,iBAAd,UAAgCY,EAAMiB,KAAtC,KAA8CjB,EAAMqE,IAAIC,WACvD,oBAAIlF,UAAU,gBAAd,SAA+BV,IAC/B,sBAAKU,UAAU,gBAAgBC,KAAK,QAApC,UACA,wBAAOD,UAAU,mBAAjB,UACG,qBAAIA,UAAU,wBAAd,mBAA6CL,EAAWiB,EAAMoD,KAAKpE,MAAnE,YACA,qBAAII,UAAU,yBAAd,yBAAoDL,EAAWiB,EAAMoD,KAAKmB,YAA1E,WACA,sBAAKnF,UAAU,2BAAf,UACI,cAAC,cAAD,CACAoF,OAAQxE,EAAMyE,QAAQ,GAAGL,GAAInD,KAAK,MAAM7B,UAAU,gCAClDsF,IAAK1E,EAAMyE,QAAQ,GAAGE,YACtBrD,OAAK,IAET,oBAAGlC,UAAU,gCAAb,8BAA+DY,EAAMyE,QAAQ,GAAGE,kBAGhF,oBAAGvF,UAAU,wBAAb,mBAA4CL,EAAWiB,EAAMoD,KAAKC,UAAlE,WACA,oBAAGjE,UAAU,uBAAb,kBAA0CL,EAAWiB,EAAMoD,KAAKE,UAAhE,cAGH,sBAAMlE,UAAU,oBAAoBC,KAAK,OAAzC,SAEOkD,EAAgBqC,KAAI,SAACC,EAAGC,GAAJ,OAChB,cAAC,EAAD,CACIpG,KAAMmG,GACDC,cAQzB,Y,GAjOXC,a,MCKNC,MAVf,WACE,OACE,eAAC,WAAD,WACE,oBAAI5F,UAAU,aAAd,yBACA,cAAC,EAAD,QCIS6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtF,MAAK,YAAkD,IAA/CuF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d4bb9690.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    getCurrentWeather: zipCode => {\n        return axios.get(`https://api.openweathermap.org/data/2.5/weather?zip=${zipCode}&appid=fa56bfa56d667c9243a012b42283ad11`)\n        \n    }\n}","import axios from 'axios';\n\n\n   export default {\n     getForecast: zipCode => {\n       return axios\n         .get(\n           `https://api.openweathermap.org/data/2.5/forecast?zip=${zipCode}&appid=fa56bfa56d667c9243a012b42283ad11`\n         )\n        //  .then((res) => {\n        //    //group the objects by date\n        //    forecast = res.data.list.reduce((a, c) => {\n        //      //if the date doesn't exist in the array\n        //      if (!a[c.dt_txt.substring(0, 10)]) {\n        //        //sets each individual date as an array\n        //        a[c.dt_txt.substring(0, 10)] = [c];\n        //        //also checks to see if the that object is in the array\n        //      } else {\n        //        //pushes that object into that specific date array\n        //        a[c.dt_txt.substring(0, 10)].push(c);\n        //      }\n        //      return a;\n        //      //puts everything into an array\n        //    }, {});\n\n        //    //convert info an array\n        //    let newForecast = Object.values(forecast);\n        //    //setup the final forecast array\n        //    //setup the variables\n        //    let max, min, thisHasRain, hasRain;\n\n        //    //get to each set of arrays\n\n        //    //get the max of each set\n        //    for (let t = 0; t < newForecast.length; t++) {\n        //      //get the max\n        //      max = newForecast[t].reduce((prev, cur) => {\n        //        return prev.main.temp_max > cur.main.temp_max ? prev : cur;\n        //      });\n        //      //get the min\n        //      min = newForecast[t].reduce((prev, cur) => {\n        //        return prev.main.temp_min < cur.main.temp_min ? prev : cur;\n        //      });\n\n        //      //setup the rain checker function\n        //      thisHasRain = (r) => {\n        //        return r.hasOwnProperty(\"rain\");\n        //      };\n\n        //      //check if there's rain\n        //      hasRain = newForecast[t].some(thisHasRain);\n\n        //      //push them into newForecastWeek\n        //      newForecastWeek.push({\n        //        high: max.main.temp_max,\n        //        low: min.main.temp_min,\n        //        rain: hasRain,\n        //      });\n        //    }\n        //  });\n     },\n   };   \n","import React, {Fragment} from 'react';\nimport Moment from 'react-moment';\n\nconst ForecastWeek = (fore) => {\n    const {high, low, rain, index} = fore.date;\n    const fConverter = temp => {\n        temp = (1.8 * (temp - 273)) + 32\n        return temp.toFixed(1)\n    }\n    const nDate = new Date();\n    return (\n        <Fragment>\n            <article className=\"results__forecast-article\" role=\"listitem\">\n                  <div className=\"results__forecast-article-date\" role=\"contentinfo\">\n                    <h2 className=\"results__forecast-article-date-title\">\n                        <Moment add={{days: index + 1}} format=\"MM/DD\">{nDate}</Moment>\n                    </h2>\n                  </div>\n                  <div className=\"results__forecast-article-weather\" role=\"contentinfo\">\n                    <h5 className=\"results__forecast-article-weather-info\">\n                        High: {fConverter(high)}&deg;F\n                    </h5>\n                    <h5 className=\"results__forecast-article-weather-info\">\n                        Low: {fConverter(low)}&deg;F\n                    </h5>\n                  </div>\n                  <div className=\"results__forecast-article-rain\">\n                  <h5 className=\"results__forecast-article-rain-info\">Will It Rain?\n                            </h5>\n                            {\n                                (rain) ? (\n                                    <p className=\"results__forecast-article-rain-info-a\">Get an Umbrella</p>\n                                ): (\n                                    <p className=\"results__forecast-article-weather-info-a\">You're Fine</p>\n                                )\n                            }\n                    \n                  </div>\n            </article>\n        </Fragment>\n    )\n}\n\nexport default ForecastWeek;","import React, {Fragment, Component} from 'react';\nimport {WeatherIcon} from 'weather-react-icons';\nimport 'weather-react-icons/lib/css/weather-icons.css';\nimport 'weather-react-icons/lib/css/weather-icons-wind.css';\n//import PropTypes from 'prop-types'\nimport CurrentGrab from '../../utils/CurrentGrab';\nimport ForecastGrab from '../../utils/ForecastGrab';\nimport ForecastWeek from './../forecast/forecast';\n\nclass Search extends Component{\n    constructor(){\n        super()\n        this.state = {\n            zip: '',\n            today: [],\n            forecast: [],\n            submitted: false,\n            status: '',\n            isLoading: false,\n            night: false\n        }\n    }\n        \n        //pass once the form is submitted\n        fetchCurrentWeather = zip => {\n             CurrentGrab.getCurrentWeather(zip)\n                .then(res => {\n                    this.setState({\n                        today: res.data,\n                        status: res.status,\n                        submitted: true\n                    })\n                })\n                .catch(err => console.log(err))\n        }\n\n        fetchForecast = zip => {\n            ForecastGrab.getForecast(zip)\n            .then(res => {\n                this.setState({\n                    forecast: res.data.list,\n                    status: res.status,\n                    submitted: true\n                })\n            }).catch(err => console.log(err))\n        }\n\n        componentDidMount(){\n            this.fetchCurrentWeather();\n            this.fetchForecast();\n        }\n\n        makeRequest = () => {\n\n        }\n\n    \n    handleChange = e => {\n        const {value, name} = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n   handleSubmit = e => {\n        e.preventDefault();\n        this.setState({\n            ...this.state\n        })\n        this.fetchCurrentWeather(this.state.zip)\n        this.fetchForecast(this.state.zip);\n    }\n\n    // handleKeyPress = e => {\n    //     if(e.keyCode === 13){\n    //         this.handleSubmit();\n    //     }\n    // }\n\n        render(){\n            const isSubmitted = this.state.submitted\n            const status = parseInt(this.state.status);\n            const checkZip = zip => {\n                return /(^\\d{5}$)/.test(zip)\n            }\n            const fConverter = temp => {\n                 temp = (1.8 * (temp - 273)) + 32\n                 return temp.toFixed(1)\n            }\n            //variables for current\n            const today = this.state.today;\n            //variables for the dates\n            const dateOptions = {\n                weekday: 'short',\n                day: 'numeric',\n                month: 'short',\n                year: 'numeric',\n                timezone: 'UTC'\n            }\n            const date = new Intl.DateTimeFormat('en-US', dateOptions).format(new Date())\n\n            //variables for forecast \n            const forecast = this.state.forecast;\n            let thisForecast, newForecast, max, min, thisHasRain, hasRain;\n            const newForecastWeek = [];\n\n            //group of the objects by date\n            thisForecast = forecast.reduce((a, c) => {\n                //if the date doesn't exist in the array\n                if (!a[c.dt_txt.substring(0, 10)]) {\n                  //sets each individual date as an array\n                  a[c.dt_txt.substring(0, 10)] = [c];\n                  //also checks to see if the that object is in the array\n                } else {\n                  //pushes that object into that specific date array\n                  a[c.dt_txt.substring(0, 10)].push(c);\n                }\n                return a;\n                //puts everything into an array\n              }, {});\n              //change the object into an array\n              newForecast = Object.values(thisForecast)\n\n              for (let t = 0; t < newForecast.length; t++) {\n                //get the max\n                max = newForecast[t].reduce((prev, cur) => {\n                  return prev.main.temp_max > cur.main.temp_max ? prev : cur;\n                });\n                //get the min\n                min = newForecast[t].reduce((prev, cur) => {\n                  return prev.main.temp_min < cur.main.temp_min ? prev : cur;\n                });\n   \n                //setup the rain checker function\n                thisHasRain = (r) => {\n                  return r.hasOwnProperty(\"rain\");\n                };\n   \n                //check if there's rain\n                hasRain = newForecast[t].some(thisHasRain);\n   \n                //push them into newForecastWeek\n                newForecastWeek.push({\n                  high: max.main.temp_max,\n                  low: min.main.temp_min,\n                  rain: hasRain,\n                  index: t\n                });\n              }\n            \n            return(\n                <Fragment>\n                    <section className=\"search\">\n                        <form onSubmit = {this.handleSubmit} className=\"search__form\">\n                            <label \n                                htmlFor=\"searchBar\" \n                                className=\"search__form-label\"\n                            >Search by US Zip Code</label>\n                            <input \n                                type=\"text\" \n                                maxLength=\"5\"\n                                placeholder=\"Example: 11221\"\n                                className=\"search__form-input\" \n                                value = {this.state.zip}\n                                name=\"zip\"\n                                onChange = {this.handleChange}\n                                onKeyPress = {(e) => {\n                                    if(e.key === 'Enter'){\n                                        this.handleSubmit(e);\n                                    }\n                                }}\n                                onFocus = { (e) => {\n                                        if(!checkZip(e)) {\n                                            <p className=\"error\" role=\"alert\">\n                                                Please Enter a Valid Zip Code\n                                            </p>\n                                        }\n                                    }\n                                }\n                                id=\"searchBar\"\n                            />\n                            \n                            <button \n                                className=\"search__form-button\"\n                                type=\"submit\"\n                            >Show Me the Weather</button>\n                        </form>\n                    </section>\n                    <section className=\"status-error\">\n                        {\n                            (status === 404) ? (\n                                <h2 className=\"status-error__message\">\n                                    Please Try Again\n                                </h2>\n                            ):null\n                        }\n                        \n                    </section>\n                    \n                        {\n                            (isSubmitted) ? (\n                                <section className=\"results\">\n                                    <h1 className=\"results__title\">{today.name}, {today.sys.country}</h1> \n                                     <h2 className=\"results__date\">{date}</h2>\n                                     <div className=\"results__info\" role=\"group\">\n                                     <aside className=\"results__current\">\n                                        <h3 className=\"results__current-temp\">Temp: {fConverter(today.main.temp)} &deg;F</h3>\n                                        <h4 className=\"results__current-feels\">Feels Like: {fConverter(today.main.feels_like)}&deg;F</h4>\n                                        <div className=\"results__current-weather\">\n                                            <WeatherIcon \n                                            iconId={today.weather[0].id} name=\"owm\" className=\"results__current-weather-icon\" \n                                            alt={today.weather[0].description} \n                                            night\n                                            />\n                                        <p className=\"results__current-weather-info\">Current Outlook: {today.weather[0].description}</p>\n                                        </div>\n                                            \n                                        <p className=\"results__current-high\">High: {fConverter(today.main.temp_max)}&deg;F</p>\n                                        <p className=\"results__current-low\">Low: {fConverter(today.main.temp_min)}&deg;F</p>\n                                    \n                                     </aside>\n                                     <main className=\"results__forecast\" role=\"list\">\n                                        {\n                                            newForecastWeek.map((d, i) => (\n                                                <ForecastWeek\n                                                    date={d}\n                                                    key={i}\n                                                />\n                                            ))\n                                        }\n                                        \n                                     </main>\n                                     </div>\n                                     </section>\n                            ) : null\n        } \n                        \n                    \n                </Fragment>\n            )\n    }\n}\n\nexport default Search;","import {Fragment} from 'react';\nimport Search from './components/search/search';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Fragment>\n      <h1 className=\"app__title\">Weather App</h1>\n      <Search/>\n    </Fragment>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}